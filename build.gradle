buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.5"
    }

}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'com.google.protobuf' version '0.8.11'
    id 'org.gradle.test-retry' version "1.1.5"
}
apply plugin: 'io.qameta.allure'

group 'sdexnt'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

//JIRA
dependencies {
    implementation files("bin/jwt2.jar")
    implementation files("bin/zfj-cloud-rest-client-3.0.jar")
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
    implementation(group: 'com.google.guava', name: 'guava', version: '28.0-jre')
    implementation group: 'ru.yandex.qatools.htmlelements', name: 'htmlelements-java', version: '1.20.0'
    implementation "com.fasterxml.jackson.core:jackson-databind:2.9.9.1"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.9"
    implementation "io.rest-assured:rest-assured:3.3.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.50"
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.11'
    implementation 'com.auth0:java-jwt:3.8.3'
    implementation group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
    implementation 'com.google.api-client:google-api-client:1.23.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
    implementation 'com.google.apis:google-api-services-gmail:v1-rev83-1.23.0'
    implementation 'com.warrenstrange:googleauth:1.4.0'
    implementation('org.bitcoinj:bitcoinj-core:0.15.7') {
        exclude group: "com.google.guava", module: "guava"
    }
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5'
    compile group: 'net.sourceforge.javacsv', name: 'javacsv', version: '2.0'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.5'

}

test {
    def threads = 4
    if (project.hasProperty("threads")) {
        threads = project.property("threads") as Integer
    }
    systemProperties = [
            'allure.link.tms.pattern'                                  : 'https://sdexnt.atlassian.net/browse/{}',
            'junit.jupiter.execution.parallel.enabled'                 : 'true',
            'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
            'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
            'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': "$threads",
            'junit.jupiter.execution.timeout.test.method.default'      : '10 m',
            'config-file'                                              : System.getProperty("config", "application-dev.yml"),
            'traceNetwork'                                             : System.getProperty("traceNetwork", "false"),
            'skipBalances'                                             : System.getProperty("skipBalances", "false"),
            'skipInitToken'                                            : System.getProperty("skipInitToken", "false"),
            'smokeOnly'                                                : System.getProperty("smokeOnly", "false"),
    ]
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "started"
    }
    if (!project.hasProperty("precheck")) {
        exclude '**/precheck/**'
    }
    exclude '**/manual/**'
//    testLogging.showStandardStreams = true

    if (project.hasProperty("retries")) {
        def attempts = project.property("retries") as Integer
        retry {
            maxRetries = attempts
            maxFailures = 35
            failOnPassedAfterRetry = false
        }
    }
}

task smokeTest(type: Test) {

}

task tags(type: Test) {
    def threads = 4
    def tagsProperty = [
            'includeTags'                                              : System.getProperty("includeTags", ""),
            'excludeTags'                                              : System.getProperty("excludeTags", "")
    ]

    if (project.hasProperty("threads")) {
        threads = project.property("threads") as Integer
    }
    systemProperties = [
            'allure.link.tms.pattern'                                  : 'https://sdexnt.atlassian.net/browse/{}',
            'junit.jupiter.execution.parallel.enabled'                 : 'true',
            'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
            'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
            'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': "$threads",
            'junit.jupiter.execution.timeout.test.method.default'      : '10 m',
            'config-file'                                              : System.getProperty("config", "application-dev.yml"),
            'traceNetwork'                                             : System.getProperty("traceNetwork", "false"),
            'skipBalances'                                             : System.getProperty("skipBalances", "false"),
            'skipInitToken'                                            : System.getProperty("skipInitToken", "false"),
            'smokeOnly'                                                : System.getProperty("smokeOnly", "false"),
    ]

    useJUnitPlatform() {
        if (!tagsProperty.get('includeTags').isEmpty()) {
            includeTags tagsProperty.get('includeTags')
        }
        if (!tagsProperty.get('excludeTags').isEmpty()) {
            excludeTags tagsProperty.get('excludeTags')
        }
    }

    reports {
        html.enabled true
        junitXml.enabled = true
    }

    testLogging {
        events "passed", "skipped", "failed", "started"
    }

    if (!project.hasProperty("precheck")) {
        exclude '**/precheck/**'
    }
    exclude '**/manual/**'
//    testLogging.showStandardStreams = true

    if (project.hasProperty("retries")) {
        def attempts = project.property("retries") as Integer
        retry {
            maxRetries = attempts
            maxFailures = 35
            failOnPassedAfterRetry = false
        }
    }
}

// Jupiter
dependencies {
    implementation("org.junit.jupiter:junit-jupiter-api:5.4.2")
    implementation("org.junit.jupiter:junit-jupiter-params:5.4.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.4.2")
}

//Platform
dependencies {
    testImplementation("org.junit.platform:junit-platform-engine:1.4.2")
}

// Vintage
dependencies {
    testImplementation("junit:junit:4.12")
    testRuntime("org.junit.vintage:junit-vintage-engine:5.4.2")
}

// Allure
dependencies {
    compile group: 'io.qameta.allure', name: 'allure-junit4', version: '2.8.1'
    testCompile group: 'io.qameta.allure', name: 'allure-junit5', version: '2.13.0'
    compile group: 'io.qameta.allure', name: 'allure-cucumber-jvm', version: '2.8.1'
    compile group: 'io.qameta.allure', name: 'allure-rest-assured', version: '2.13.0'
}

allure {
    autoconfigure = true
    aspectjweaver = true
    version = "2.7.0"

    useJUnit5 {
        version = '2.13.0' // Latest Allure Version
    }
}

//Proto
def grpcVersion = '1.24.0'
def protobufVersion = '3.10.0'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "javax.annotation:javax.annotation-api:1.2"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "org.mockito:mockito-core:2.25.1"
    implementation('com.google.protobuf:protobuf-java:3.10.0')
}

//Cucumber

dependencies {
    testImplementation 'io.cucumber:cucumber-junit:4.7.4'
    testImplementation 'io.cucumber:cucumber-java8:4.7.4'
    testImplementation group: 'io.cucumber', name: 'cucumber-core', version: '4.7.4'

//    implementation 'io.github.prashant-ramcharan:courgette-jvm:3.3.0'
    compile group: 'io.cucumber', name: 'cucumber-picocontainer', version: '4.7.4'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
//    generatedFilesBaseDir = "$projectDir/src"
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
    test {
        kotlin {
            if (System.getProperty("smokeOnly", "false") == "true") {
                exclude '**/frontend/atm/**'
            }
        }
    }
}


compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}